# Unique name for this workflow
name: Validate TST branch to TST org

# Definition when the workflow should run
on:
    workflow_dispatch :
    pull_request:
      # The events are that a PR is opened, or when a commit is pushed
      # to a branch that has an existing pull request
      types: [opened, synchronize]
      # The branches filter allows to specify that this workflow should only
      # run if the branch name is "develop". This way we prevent this workflow
      # from running when PRs are opened on other branches
      # We only care about changes to the force-app directory, which is the
      # root directory of the sfdx project. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      branches: [ TST ]
      paths:
        - 'force-app/**'
            

# Jobs to be executed
jobs:
    validate-tstbranch-to-tst-orgs:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:

            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v2
              with:
                node-version: '14'

            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2
              with:
                fetch-depth: 0

            # - name: 'Run all Test classes when deploying to TST'
            #   run: |
            #       TESTS=$(cat ./deploymentSpecificTest.txt)       
            #       echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

            - name: 'Read PR Body'
              env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
                PR_BODY: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.

              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comma

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
              run: |
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt)       
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
                  
            # Store secret for TST org
            - name: 'Populate auth file with SFDX_URL secret of the TST org'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_TAANA_TST}} > ./SFDX_TAANA_TST.txt
                  

            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/
                  cat changed-sources/package/package.xml

            # Now we upload the .sarif file as explained in the previous step
            - name: Upload Deployment list
              uses: actions/upload-artifact@v3 #github/codeql-action/upload-sarif@v2
              with:
                name: deploymentManifest
                path: changed-sources/package/package.xml

            - name: Upload destructiveChanges Deployment list if any
              uses: actions/upload-artifact@v3 #github/codeql-action/upload-sarif@v2
              with:
                name: destructiveChangesManifest
                path: changed-sources/destructiveChanges/destructiveChanges.xml


            # Install java as it is required for the next step
            - name: 'Installing java'
              run: sudo apt-get install openjdk-8-jdk

            # Install SFDX scanner
            - name: 'Installing SFDX scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner

            - name: 'PMD Scan code'
              run: |
                cd changed-sources
                sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'  
                cd ..

            # Now we upload the .sarif file as explained in the previous step
            - name: Upload SARIF file
              uses: actions/upload-artifact@v3 #github/codeql-action/upload-sarif@v2
              with:
               name: pmd-scanresults
               path: changed-sources/apexScanResults.sarif     

            # Authenticate to org
            - name: 'Authenticate to TST Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_TAANA_TST.txt -s -a TST

            - name: 'Validate the changes to TST org - run specified tests'
              if: ${{ env.APEX_TESTS != 'all' }}
              run: |
                   echo ${{env.APEX_TESTS}}
                   sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json

             # If the env variable equals all, we run all tests
            - name: 'Validate the changes to TST org - run all tests'
              if: ${{ env.APEX_TESTS == 'all' }}
              run: sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests  --json

            #sfdx force:source:deploy -p force-app --testlevel RunLocalTests --json
              

            - name: 'Validate destructive changes (if any) to TST org'
              run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings --testlevel RunLocalTests --json

            # Authenticate to org
            # - name: 'Authenticate to Staging Org to Staging org'
            #   run: sfdx auth:sfdxurl:store -f ./SFDX_STAGING_URL.txt -s -a staging

            # - name: 'deploy the entire branch'
            #   run: sfdx force:source:deploy -p force-app --testlevel RunLocalTests --json

            # - name: 'deploy destructive changes (if any) to Staging org'
            #   run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings
